# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey has `on_delete` set to the desired behavior.
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from __future__ import unicode_literals

from django.db import models


class Advertises(models.Model):
    name = models.CharField(max_length=100)
    link = models.TextField()
    pic = models.CharField(max_length=100)
    pub_time = models.DateTimeField()
    edit_time = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'advertises'


class AuthGroup(models.Model):
    name = models.CharField(unique=True, max_length=80)

    class Meta:
        managed = False
        db_table = 'auth_group'


class AuthGroupPermissions(models.Model):
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)
    permission = models.ForeignKey('AuthPermission', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_group_permissions'
        unique_together = (('group', 'permission'),)


class AuthPermission(models.Model):
    name = models.CharField(max_length=255)
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING)
    codename = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'auth_permission'
        unique_together = (('content_type', 'codename'),)


class AuthUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=150)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'auth_user'


class AuthUserGroups(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_groups'
        unique_together = (('user', 'group'),)


class AuthUserUserPermissions(models.Model):
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'auth_user_user_permissions'
        unique_together = (('user', 'permission'),)


class Comments(models.Model):
    comment_content = models.TextField()
    movie_id = models.ForeignKey('Movies', models.DO_NOTHING)
    user_id = models.ForeignKey('Users', models.DO_NOTHING)
    comment_time = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'comments'


class Countries(models.Model):
    country = models.CharField(max_length=200)

    class Meta:
        managed = False
        db_table = 'countries'


class DjangoAdminLog(models.Model):
    action_time = models.DateTimeField()
    object_id = models.TextField(blank=True, null=True)
    object_repr = models.CharField(max_length=200)
    action_flag = models.SmallIntegerField()
    change_message = models.TextField()
    content_type = models.ForeignKey('DjangoContentType', models.DO_NOTHING, blank=True, null=True)
    user = models.ForeignKey(AuthUser, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'django_admin_log'


class DjangoContentType(models.Model):
    app_label = models.CharField(max_length=100)
    model = models.CharField(max_length=100)

    class Meta:
        managed = False
        db_table = 'django_content_type'
        unique_together = (('app_label', 'model'),)


class DjangoMigrations(models.Model):
    app = models.CharField(max_length=255)
    name = models.CharField(max_length=255)
    applied = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_migrations'


class DjangoSession(models.Model):
    session_key = models.CharField(primary_key=True, max_length=40)
    session_data = models.TextField()
    expire_date = models.DateTimeField()

    class Meta:
        managed = False
        db_table = 'django_session'


class Leadroles(models.Model):
    name = models.CharField(max_length=200)

    class Meta:
        managed = False
        db_table = 'leadroles'


class Movies(models.Model):
    name = models.CharField(max_length=200)
    release_time = models.DateField()
    director = models.CharField(max_length=200)
    length = models.CharField(max_length=4)
    imdb_link = models.CharField(max_length=200, blank=True, null=True)
    mark = models.FloatField()
    cover_link = models.CharField(max_length=100)
    summary = models.TextField()
    is_delete = models.IntegerField()
    is_carousel = models.IntegerField()
    is_sidebar = models.IntegerField()
    country = models.ForeignKey(Countries, models.DO_NOTHING)
    is_vipfilm = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'movies'


class MoviesLeadRole(models.Model):
    movie = models.ForeignKey(Movies, models.DO_NOTHING)
    leadrole = models.ForeignKey(Leadroles, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'movies_lead_role'
        unique_together = (('movie', 'leadrole'),)


class MoviesLike(models.Model):
    movie = models.ForeignKey(Movies, models.DO_NOTHING)
    user = models.ForeignKey('Users', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'movies_like'
        unique_together = (('movie', 'user'),)


class MoviesStyleType(models.Model):
    movie = models.ForeignKey(Movies, models.DO_NOTHING)
    styletype = models.ForeignKey('Styletypes', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'movies_style_type'
        unique_together = (('movie', 'styletype'),)


class StoreAd(models.Model):
    title = models.CharField(max_length=50)
    image_url = models.CharField(max_length=100)
    date_publish = models.DateTimeField()
    index = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'store_ad'


class StoreBrand(models.Model):
    name = models.CharField(max_length=30)
    index = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'store_brand'


class StoreCaritem(models.Model):
    quantity = models.IntegerField()
    sum_price = models.FloatField()
    clothing = models.ForeignKey('StoreClothing', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'store_caritem'


class StoreCategory(models.Model):
    typ = models.CharField(max_length=20)
    name = models.CharField(max_length=30)
    index = models.IntegerField()
    sex = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'store_category'


class StoreClothing(models.Model):
    name = models.CharField(max_length=30)
    old_price = models.FloatField()
    new_price = models.FloatField()
    discount = models.FloatField()
    desc = models.CharField(max_length=100)
    sales = models.IntegerField()
    num = models.IntegerField()
    image_url_i = models.CharField(max_length=100)
    image_url_l = models.CharField(max_length=100)
    image_url_m = models.CharField(max_length=100)
    image_url_r = models.CharField(max_length=100)
    image_url_c = models.CharField(max_length=100)
    brand = models.ForeignKey(StoreBrand, models.DO_NOTHING)
    category = models.ForeignKey(StoreCategory, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'store_clothing'


class StoreClothingSize(models.Model):
    clothing = models.ForeignKey(StoreClothing, models.DO_NOTHING)
    size = models.ForeignKey('StoreSize', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'store_clothing_size'
        unique_together = (('clothing', 'size'),)


class StoreClothingTag(models.Model):
    clothing = models.ForeignKey(StoreClothing, models.DO_NOTHING)
    tag = models.ForeignKey('StoreTag', models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'store_clothing_tag'
        unique_together = (('clothing', 'tag'),)


class StoreSize(models.Model):
    name = models.CharField(max_length=20)
    index = models.IntegerField()

    class Meta:
        managed = False
        db_table = 'store_size'


class StoreTag(models.Model):
    name = models.CharField(max_length=30)

    class Meta:
        managed = False
        db_table = 'store_tag'


class StoreUser(models.Model):
    password = models.CharField(max_length=128)
    last_login = models.DateTimeField(blank=True, null=True)
    is_superuser = models.IntegerField()
    username = models.CharField(unique=True, max_length=30)
    first_name = models.CharField(max_length=30)
    last_name = models.CharField(max_length=30)
    email = models.CharField(max_length=254)
    is_staff = models.IntegerField()
    is_active = models.IntegerField()
    date_joined = models.DateTimeField()
    qq = models.CharField(max_length=20, blank=True, null=True)
    mobile = models.CharField(unique=True, max_length=11, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'store_user'


class StoreUserGroups(models.Model):
    user = models.ForeignKey(StoreUser, models.DO_NOTHING)
    group = models.ForeignKey(AuthGroup, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'store_user_groups'
        unique_together = (('user', 'group'),)


class StoreUserUserPermissions(models.Model):
    user = models.ForeignKey(StoreUser, models.DO_NOTHING)
    permission = models.ForeignKey(AuthPermission, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'store_user_user_permissions'
        unique_together = (('user', 'permission'),)


class Styletypes(models.Model):
    style_type = models.CharField(max_length=20)

    class Meta:
        managed = False
        db_table = 'styletypes'


class Users(models.Model):
    username = models.CharField(unique=True, max_length=32)
    password = models.CharField(max_length=200)
    email = models.CharField(unique=True, max_length=64)
    token = models.CharField(max_length=250)
    subscribe = models.CharField(max_length=4)
    is_vip = models.IntegerField()
    v_end = models.DateField()
    v_start = models.DateField()

    class Meta:
        managed = False
        db_table = 'users'


class Visited(models.Model):
    m = models.ForeignKey(Movies, models.DO_NOTHING)
    u = models.ForeignKey(Users, models.DO_NOTHING)

    class Meta:
        managed = False
        db_table = 'visited'
